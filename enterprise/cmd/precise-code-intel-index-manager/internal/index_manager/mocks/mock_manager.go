// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package mocks

import (
	"context"
	indexmanager "github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-index-manager/internal/index_manager"
	store "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
	"sync"
)

// MockManager is a mock implementation of the Manager interface (from the
// package
// github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-index-manager/internal/index_manager)
// used for unit testing.
type MockManager struct {
	// CompleteFunc is an instance of a mock function object controlling the
	// behavior of the method Complete.
	CompleteFunc *ManagerCompleteFunc
	// DequeueFunc is an instance of a mock function object controlling the
	// behavior of the method Dequeue.
	DequeueFunc *ManagerDequeueFunc
	// HeartbeatFunc is an instance of a mock function object controlling
	// the behavior of the method Heartbeat.
	HeartbeatFunc *ManagerHeartbeatFunc
	// StartFunc is an instance of a mock function object controlling the
	// behavior of the method Start.
	StartFunc *ManagerStartFunc
	// StopFunc is an instance of a mock function object controlling the
	// behavior of the method Stop.
	StopFunc *ManagerStopFunc
}

// NewMockManager creates a new mock of the Manager interface. All methods
// return zero values for all results, unless overwritten.
func NewMockManager() *MockManager {
	return &MockManager{
		CompleteFunc: &ManagerCompleteFunc{
			defaultHook: func(context.Context, string, int, string) (bool, error) {
				return false, nil
			},
		},
		DequeueFunc: &ManagerDequeueFunc{
			defaultHook: func(context.Context, string) (store.Index, bool, error) {
				return store.Index{}, false, nil
			},
		},
		HeartbeatFunc: &ManagerHeartbeatFunc{
			defaultHook: func(context.Context, string, []int) error {
				return nil
			},
		},
		StartFunc: &ManagerStartFunc{
			defaultHook: func() {
				return
			},
		},
		StopFunc: &ManagerStopFunc{
			defaultHook: func() {
				return
			},
		},
	}
}

// NewMockManagerFrom creates a new mock of the MockManager interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockManagerFrom(i indexmanager.Manager) *MockManager {
	return &MockManager{
		CompleteFunc: &ManagerCompleteFunc{
			defaultHook: i.Complete,
		},
		DequeueFunc: &ManagerDequeueFunc{
			defaultHook: i.Dequeue,
		},
		HeartbeatFunc: &ManagerHeartbeatFunc{
			defaultHook: i.Heartbeat,
		},
		StartFunc: &ManagerStartFunc{
			defaultHook: i.Start,
		},
		StopFunc: &ManagerStopFunc{
			defaultHook: i.Stop,
		},
	}
}

// ManagerCompleteFunc describes the behavior when the Complete method of
// the parent MockManager instance is invoked.
type ManagerCompleteFunc struct {
	defaultHook func(context.Context, string, int, string) (bool, error)
	hooks       []func(context.Context, string, int, string) (bool, error)
	history     []ManagerCompleteFuncCall
	mutex       sync.Mutex
}

// Complete delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockManager) Complete(v0 context.Context, v1 string, v2 int, v3 string) (bool, error) {
	r0, r1 := m.CompleteFunc.nextHook()(v0, v1, v2, v3)
	m.CompleteFunc.appendCall(ManagerCompleteFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the Complete method of
// the parent MockManager instance is invoked and the hook queue is empty.
func (f *ManagerCompleteFunc) SetDefaultHook(hook func(context.Context, string, int, string) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Complete method of the parent MockManager instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ManagerCompleteFunc) PushHook(hook func(context.Context, string, int, string) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ManagerCompleteFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, string, int, string) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ManagerCompleteFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, string, int, string) (bool, error) {
		return r0, r1
	})
}

func (f *ManagerCompleteFunc) nextHook() func(context.Context, string, int, string) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ManagerCompleteFunc) appendCall(r0 ManagerCompleteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ManagerCompleteFuncCall objects describing
// the invocations of this function.
func (f *ManagerCompleteFunc) History() []ManagerCompleteFuncCall {
	f.mutex.Lock()
	history := make([]ManagerCompleteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ManagerCompleteFuncCall is an object that describes an invocation of
// method Complete on an instance of MockManager.
type ManagerCompleteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ManagerCompleteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ManagerCompleteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// ManagerDequeueFunc describes the behavior when the Dequeue method of the
// parent MockManager instance is invoked.
type ManagerDequeueFunc struct {
	defaultHook func(context.Context, string) (store.Index, bool, error)
	hooks       []func(context.Context, string) (store.Index, bool, error)
	history     []ManagerDequeueFuncCall
	mutex       sync.Mutex
}

// Dequeue delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockManager) Dequeue(v0 context.Context, v1 string) (store.Index, bool, error) {
	r0, r1, r2 := m.DequeueFunc.nextHook()(v0, v1)
	m.DequeueFunc.appendCall(ManagerDequeueFuncCall{v0, v1, r0, r1, r2})
	return r0, r1, r2
}

// SetDefaultHook sets function that is called when the Dequeue method of
// the parent MockManager instance is invoked and the hook queue is empty.
func (f *ManagerDequeueFunc) SetDefaultHook(hook func(context.Context, string) (store.Index, bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Dequeue method of the parent MockManager instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ManagerDequeueFunc) PushHook(hook func(context.Context, string) (store.Index, bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ManagerDequeueFunc) SetDefaultReturn(r0 store.Index, r1 bool, r2 error) {
	f.SetDefaultHook(func(context.Context, string) (store.Index, bool, error) {
		return r0, r1, r2
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ManagerDequeueFunc) PushReturn(r0 store.Index, r1 bool, r2 error) {
	f.PushHook(func(context.Context, string) (store.Index, bool, error) {
		return r0, r1, r2
	})
}

func (f *ManagerDequeueFunc) nextHook() func(context.Context, string) (store.Index, bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ManagerDequeueFunc) appendCall(r0 ManagerDequeueFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ManagerDequeueFuncCall objects describing
// the invocations of this function.
func (f *ManagerDequeueFunc) History() []ManagerDequeueFuncCall {
	f.mutex.Lock()
	history := make([]ManagerDequeueFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ManagerDequeueFuncCall is an object that describes an invocation of
// method Dequeue on an instance of MockManager.
type ManagerDequeueFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 store.Index
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 bool
	// Result2 is the value of the 3rd result returned from this method
	// invocation.
	Result2 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ManagerDequeueFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ManagerDequeueFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1, c.Result2}
}

// ManagerHeartbeatFunc describes the behavior when the Heartbeat method of
// the parent MockManager instance is invoked.
type ManagerHeartbeatFunc struct {
	defaultHook func(context.Context, string, []int) error
	hooks       []func(context.Context, string, []int) error
	history     []ManagerHeartbeatFuncCall
	mutex       sync.Mutex
}

// Heartbeat delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockManager) Heartbeat(v0 context.Context, v1 string, v2 []int) error {
	r0 := m.HeartbeatFunc.nextHook()(v0, v1, v2)
	m.HeartbeatFunc.appendCall(ManagerHeartbeatFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the Heartbeat method of
// the parent MockManager instance is invoked and the hook queue is empty.
func (f *ManagerHeartbeatFunc) SetDefaultHook(hook func(context.Context, string, []int) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Heartbeat method of the parent MockManager instance inovkes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *ManagerHeartbeatFunc) PushHook(hook func(context.Context, string, []int) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ManagerHeartbeatFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, string, []int) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ManagerHeartbeatFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, string, []int) error {
		return r0
	})
}

func (f *ManagerHeartbeatFunc) nextHook() func(context.Context, string, []int) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ManagerHeartbeatFunc) appendCall(r0 ManagerHeartbeatFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ManagerHeartbeatFuncCall objects describing
// the invocations of this function.
func (f *ManagerHeartbeatFunc) History() []ManagerHeartbeatFuncCall {
	f.mutex.Lock()
	history := make([]ManagerHeartbeatFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ManagerHeartbeatFuncCall is an object that describes an invocation of
// method Heartbeat on an instance of MockManager.
type ManagerHeartbeatFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 []int
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ManagerHeartbeatFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ManagerHeartbeatFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// ManagerStartFunc describes the behavior when the Start method of the
// parent MockManager instance is invoked.
type ManagerStartFunc struct {
	defaultHook func()
	hooks       []func()
	history     []ManagerStartFuncCall
	mutex       sync.Mutex
}

// Start delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockManager) Start() {
	m.StartFunc.nextHook()()
	m.StartFunc.appendCall(ManagerStartFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Start method of the
// parent MockManager instance is invoked and the hook queue is empty.
func (f *ManagerStartFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Start method of the parent MockManager instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ManagerStartFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ManagerStartFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ManagerStartFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *ManagerStartFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ManagerStartFunc) appendCall(r0 ManagerStartFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ManagerStartFuncCall objects describing the
// invocations of this function.
func (f *ManagerStartFunc) History() []ManagerStartFuncCall {
	f.mutex.Lock()
	history := make([]ManagerStartFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ManagerStartFuncCall is an object that describes an invocation of method
// Start on an instance of MockManager.
type ManagerStartFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ManagerStartFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ManagerStartFuncCall) Results() []interface{} {
	return []interface{}{}
}

// ManagerStopFunc describes the behavior when the Stop method of the parent
// MockManager instance is invoked.
type ManagerStopFunc struct {
	defaultHook func()
	hooks       []func()
	history     []ManagerStopFuncCall
	mutex       sync.Mutex
}

// Stop delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockManager) Stop() {
	m.StopFunc.nextHook()()
	m.StopFunc.appendCall(ManagerStopFuncCall{})
	return
}

// SetDefaultHook sets function that is called when the Stop method of the
// parent MockManager instance is invoked and the hook queue is empty.
func (f *ManagerStopFunc) SetDefaultHook(hook func()) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Stop method of the parent MockManager instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *ManagerStopFunc) PushHook(hook func()) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *ManagerStopFunc) SetDefaultReturn() {
	f.SetDefaultHook(func() {
		return
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *ManagerStopFunc) PushReturn() {
	f.PushHook(func() {
		return
	})
}

func (f *ManagerStopFunc) nextHook() func() {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *ManagerStopFunc) appendCall(r0 ManagerStopFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of ManagerStopFuncCall objects describing the
// invocations of this function.
func (f *ManagerStopFunc) History() []ManagerStopFuncCall {
	f.mutex.Lock()
	history := make([]ManagerStopFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// ManagerStopFuncCall is an object that describes an invocation of method
// Stop on an instance of MockManager.
type ManagerStopFuncCall struct{}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c ManagerStopFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c ManagerStopFuncCall) Results() []interface{} {
	return []interface{}{}
}
